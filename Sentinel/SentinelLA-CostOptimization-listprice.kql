let starttime = 40d; // update to your period start time
let endtime = 10d; // update to your period end time
let SentinelPrice = dynamic([2.39,1.19,1.07,1.03,0.99,0.95,0.93,0.88,0.83]);
// [payg,tier100,tier200,tier300,tier400,tier500,tier1000,tier2000,tier5000]
// SentinelPrice[0] = PAYG price
// SentinelPrice[1] = Commitment Tier 100 price
// update to your discounts as needed
let LAWPrice = dynamic([2.743,2.32,2.18,2.14,2.09,2.05,2.02,1.97,1.91]); // update to your discounts as needed
let percentageIncrease = 0; //expected data ingestion increase
let MBPerDay = Usage
| where _TimeReceived > startofday(ago(starttime)) and _TimeReceived < startofday(ago(endtime))
| where IsBillable == true
| summarize MB_per_day = (sum(Quantity) * ((100.0 + percentageIncrease) / 100.0)) * 1.0 by bin(_TimeReceived,1d);
let SentinelPricing = MBPerDay
| extend PayAsYouGo = max_of(MB_per_day/1024.0, 0.0) * SentinelPrice[0]
| extend Commitment100 = max_of(MB_per_day/1024.0, 100.0) * SentinelPrice[1]
| extend Commitment200 = max_of(MB_per_day/1024.0, 200.0) * SentinelPrice[2]
| extend Commitment300 = max_of(MB_per_day/1024.0, 300.0) * SentinelPrice[3]
| extend Commitment400 = max_of(MB_per_day/1024.0, 400.0) * SentinelPrice[4]
| extend Commitment500 = max_of(MB_per_day/1024.0, 500.0) * SentinelPrice[5]
| extend Commitment1000 = max_of(MB_per_day/1024.0, 1000.0) * SentinelPrice[6]
| extend Commitment2000 = max_of(MB_per_day/1024.0, 2000.0) * SentinelPrice[7]
| extend Commitment5000 = max_of(MB_per_day/1024.0, 5000.0) * SentinelPrice[8];
let LAWPricing = MBPerDay
| extend PayAsYouGo = max_of(MB_per_day/1024.0, 0.0) * LAWPrice[0]
| extend Commitment100 = max_of(MB_per_day/1024.0, 100.0) * LAWPrice[1]
| extend Commitment200 = max_of(MB_per_day/1024.0, 200.0) * LAWPrice[2]
| extend Commitment300 = max_of(MB_per_day/1024.0, 300.0) * LAWPrice[3]
| extend Commitment400 = max_of(MB_per_day/1024.0, 400.0) * LAWPrice[4]
| extend Commitment500 = max_of(MB_per_day/1024.0, 500.0) * LAWPrice[5]
| extend Commitment1000 = max_of(MB_per_day/1024.0, 1000.0) * LAWPrice[6]
| extend Commitment2000 = max_of(MB_per_day/1024.0, 2000.0) * LAWPrice[7]
| extend Commitment5000 = max_of(MB_per_day/1024.0, 5000.0) * LAWPrice[8];
let pricing_per_service =SentinelPricing 
| union withsource=SourceTable LAWPricing
| extend SourceTable = iif(SourceTable == "union_arg0", "SentinelPrice", "LAWPrice")
| summarize cost_PayAsYouGo = sum(PayAsYouGo), cost_Commitment100 = sum(Commitment100), cost_Commitment200 = sum(Commitment200), cost_Commitment300 = sum(Commitment300), cost_Commitment400 = sum(Commitment400), cost_Commitment500 = sum(Commitment500), cost_Commitment1000 = sum(Commitment1000), cost_Commitment2000 = sum(Commitment2000), cost_Commitment5000 = sum(Commitment5000) by SourceTable
| extend cost_lowest = min_of(cost_PayAsYouGo, cost_Commitment100, cost_Commitment200, cost_Commitment300, cost_Commitment400,cost_Commitment500,cost_Commitment1000,cost_Commitment2000,cost_Commitment5000);
let pricing =SentinelPricing
| union withsource=SourceTable LAWPricing
| extend SourceTable = iif(SourceTable == "union_arg0", "SentinelPrice", "LAWPrice")
| summarize cost_PayAsYouGo = sum(PayAsYouGo), cost_Commitment100 = sum(Commitment100), cost_Commitment200 = sum(Commitment200), cost_Commitment300 = sum(Commitment300), cost_Commitment400 = sum(Commitment400), cost_Commitment500 = sum(Commitment500), cost_Commitment1000 = sum(Commitment1000), cost_Commitment2000 = sum(Commitment2000), cost_Commitment5000 = sum(Commitment5000) by _TimeReceived, SourceTable
| extend cost_lowest = min_of(cost_PayAsYouGo, cost_Commitment100, cost_Commitment200, cost_Commitment300, cost_Commitment400,cost_Commitment500,cost_Commitment1000,cost_Commitment2000,cost_Commitment5000);
// choose from the following Functions:
pricing_per_service //showing the optimal LAW and Sentinel costs
//pricing // optimal LAW and Sentinel pricing for each day
//LAWPricing // only the LAW pricing for PAYG and Commitment tiers, it does not show the best one
//SentinelPricing // only the Sentinel pricing for PAYG and Commitment tiers, it does not show the best one
//MBPerDay // the amount of ingested non-free data per day
